[["introduction.html", "Data Processing and Visualization in R 17-Oct-2025 1 Introduction 1.1 Goals", " Data Processing and Visualization in R 17-Oct-2025 2025-10-17 1 Introduction This workshop introduces data visualization in R using ggplot2, plotly. We will cover both theory and practical exercises. 1.1 Goals Understand R visualization grammar Produce publication-ready plots Explore real datasets library(&quot;webshot2&quot;) knitr::include_url(&quot;https://docs.google.com/presentation/d/1ifS-JNsKchnT3tlZtZsDes7oRqoKTbjO/edit?usp=share_link&amp;ouid=114123940479665238615&amp;rtpof=true&amp;sd=true&quot;) 2025 • Data Science Platform • CFB "],["install-tidyverse.html", "2 Install tidyverse", " 2 Install tidyverse "],["load-tidyverse.html", "3 Load tidyverse", " 3 Load tidyverse library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────────────────────────────────────────────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.4 ✔ readr 2.1.5 ## ✔ forcats 1.0.0 ✔ stringr 1.5.1 ## ✔ ggplot2 3.5.2 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.4 ✔ tidyr 1.3.1 ## ✔ purrr 1.0.4 ## ── Conflicts ────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors "],["load-and-prepare-the-data.html", "4 Load and prepare the data 4.1 Data transformation 4.2 Data aggregation 4.3 Remove contaminants 4.4 Cleaning names 4.5 Plot overall intensity distribution per replicate", " 4 Load and prepare the data data &lt;- read_csv(&quot;01_data/PXD040621_peptides.csv&quot;, show_col_types = FALSE) head(data) ## # A tibble: 6 × 11 ## ProteinName PeptideSequence PrecursorCharge FragmentIon ProductCharge ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; &lt;dbl&gt; ## 1 sp|P00959|SYM_ECOLI AAAAPVTGPLADDPI… 2 NA 0 ## 2 sp|P00959|SYM_ECOLI AAAAPVTGPLADDPI… 2 NA 0 ## 3 sp|P00959|SYM_ECOLI AAAAPVTGPLADDPI… 2 NA 0 ## 4 sp|P00959|SYM_ECOLI AAAAPVTGPLADDPI… 2 NA 0 ## 5 sp|P00959|SYM_ECOLI AAAAPVTGPLADDPI… 2 NA 0 ## 6 sp|P00959|SYM_ECOLI AAAAPVTGPLADDPI… 2 NA 0 ## # ℹ 6 more variables: IsotopeLabelType &lt;chr&gt;, Condition &lt;chr&gt;, ## # BioReplicate &lt;dbl&gt;, Run &lt;dbl&gt;, Intensity &lt;dbl&gt;, Reference &lt;chr&gt; 4.1 Data transformation log2 transformations are common for lognormal distributed data data &lt;- data %&gt;% mutate(Intensity = log2(Intensity)) 4.2 Data aggregation Aggregate the peptide intensities to protein intensities. We use the median of the peptide intensities for each protein. Also, let’s shorten sample names for better readability. protein_data &lt;- data %&gt;% group_by(ProteinName, Reference) %&gt;% summarize(Intensity = median(Intensity, na.rm = TRUE), .groups = &quot;drop&quot;) %&gt;% mutate(Reference = sapply(strsplit(Reference, &quot;_&quot;), function(x) paste(x[4:6], collapse = &quot;_&quot;))) %&gt;% mutate(Reference = str_remove(Reference, &quot;^Ecoli_&quot;)) 4.3 Remove contaminants Remove the contaminant proteins which were added to the fasta file used in the data processing. Contaminant proteins are e.g. creation which gets into the sample from the human skin/hair when sample is prepared. protein_data &lt;- protein_data %&gt;% filter(!str_detect(ProteinName, &quot;CON_&quot;)) # Check the data after removing contaminants. head(protein_data, n = 20) ## # A tibble: 20 × 3 ## ProteinName Reference Intensity ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 sp|A5A613|YCIY_ECOLI DMSO_rep1 27.2 ## 2 sp|P00350|6PGD_ECOLI DMSO_rep1 28.2 ## 3 sp|P00350|6PGD_ECOLI DMSO_rep2 27.9 ## 4 sp|P00350|6PGD_ECOLI DMSO_rep3 27.7 ## 5 sp|P00350|6PGD_ECOLI DMSO_rep4 27.2 ## 6 sp|P00350|6PGD_ECOLI Suf_rep1 27.4 ## 7 sp|P00350|6PGD_ECOLI Suf_rep2 27.0 ## 8 sp|P00350|6PGD_ECOLI Suf_rep3 27.8 ## 9 sp|P00350|6PGD_ECOLI Suf_rep4 27.6 ## 10 sp|P00363|FRDA_ECOLI DMSO_rep1 30.2 ## 11 sp|P00363|FRDA_ECOLI DMSO_rep2 30.3 ## 12 sp|P00363|FRDA_ECOLI DMSO_rep3 30.0 ## 13 sp|P00363|FRDA_ECOLI DMSO_rep4 29.5 ## 14 sp|P00363|FRDA_ECOLI Suf_rep1 30.0 ## 15 sp|P00363|FRDA_ECOLI Suf_rep2 30.1 ## 16 sp|P00363|FRDA_ECOLI Suf_rep3 29.9 ## 17 sp|P00363|FRDA_ECOLI Suf_rep4 29.6 ## 18 sp|P00370|DHE4_ECOLI DMSO_rep1 27.5 ## 19 sp|P00370|DHE4_ECOLI DMSO_rep2 26.9 ## 20 sp|P00370|DHE4_ECOLI DMSO_rep3 26.6 4.4 Cleaning names Split the ProteinName column into ‘Identifier’, ‘Source’, ‘ProteinName’ and ‘GeneName’ After splitting, we also remove the ’_ECOLI’ suffix from the GeneName column. protein_data_parsed &lt;- protein_data %&gt;% separate(ProteinName, into = c(&quot;Source&quot;, &quot;Protein&quot;, &quot;Gene&quot;), sep = &quot;\\\\|&quot;, extra = &quot;drop&quot;, remove = FALSE) %&gt;% mutate(Gene = str_remove(Gene, &quot;_ECOLI&quot;)) %&gt;% rename(&quot;Identifier&quot; = &quot;ProteinName&quot;) # Finally, add a column with the experimental condition labels protein_data_parsed &lt;- protein_data_parsed %&gt;% mutate(Label = if_else(str_detect(Reference, &quot;DMSO&quot;), &quot;DMSO&quot;, &quot;Sulforaphane&quot;)) 4.5 Plot overall intensity distribution per replicate # Define colors for the labels label_colors &lt;- c(&quot;DMSO&quot; = &quot;#6a51a3&quot;, &quot;Sulforaphane&quot; = &quot;#2ca25f&quot;) # Start the plotting pipeline protein_data_parsed %&gt;% # Format Reference names for better readability in the plots mutate(Reference = case_when( Reference == &quot;DMSO_rep1&quot; ~ &quot;DMSO 1&quot;, Reference == &quot;DMSO_rep2&quot; ~ &quot;DMSO 2&quot;, Reference == &quot;DMSO_rep3&quot; ~ &quot;DMSO 3&quot;, Reference == &quot;DMSO_rep4&quot; ~ &quot;DMSO 4&quot;, Reference == &quot;Suf_rep1&quot; ~ &quot;Sulforaphane 1&quot;, Reference == &quot;Suf_rep2&quot; ~ &quot;Sulforaphane 2&quot;, Reference == &quot;Suf_rep3&quot; ~ &quot;Sulforaphane 3&quot;, Reference == &quot;Suf_rep4&quot; ~ &quot;Sulforaphane 4&quot;, TRUE ~ Reference )) %&gt;% # Start ggplot, map global aesthetics (x axis and fill color) ggplot(., aes(x = Intensity, fill = Label)) + # Add histogram layer with 40 bins and white borders geom_histogram(bins = 40, color = &quot;white&quot;) + # Add labels and titles labs( title = &quot;Log2-transformed protein intensity distributions&quot;, x = &quot;Log2 [Intensity]&quot;, y = &quot;Count&quot;, fill = &quot;Group&quot; ) + # Adjust y-axis to make bars touch the x-axis scale_y_continuous(expand = c(0.01, 0)) + # Use a minimal plot theme to start the customization theme_minimal() + # Use the above defined colors for the fill aesthetic scale_fill_manual(values = label_colors) + # Create a separate facet (subplot) for each Reference (replicate) facet_wrap(~Reference, scales = &quot;fixed&quot;, nrow = 2) + # Further customize the theme theme( axis.text = element_text(size = 12, color = &quot;#666666&quot;), axis.title = element_text(size = 13), plot.title = element_text(size = 14, face = &quot;bold&quot;), legend.title = element_blank(), legend.text = element_text(size = 12), legend.position = &quot;bottom&quot;, strip.text = element_text(size = 12), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank(), panel.border = element_rect(color = &quot;#666666&quot;, fill = NA), axis.ticks = element_line(color = &quot;#666666&quot;) ) 4.5.1 Perform Principal Component Analysis (PCA) # Reshape the data for PCA pca_data &lt;- protein_data_parsed %&gt;% select(Identifier, Reference, Intensity) %&gt;% pivot_wider(names_from = Identifier, values_from = Intensity) %&gt;% column_to_rownames(var = &quot;Reference&quot;) %&gt;% select(where(~ !any(is.na(.)))) %&gt;% select(where(~ var(.) &gt; 0)) # Perform PCA pca_result &lt;- prcomp(pca_data, center = TRUE, scale. = TRUE) # Get the percentage of variance explained by each principal component pca_variance &lt;- (pca_result$sdev^2) / sum(pca_result$sdev^2) * 100 # Create a data frame for plotting pca_df &lt;- as.data.frame(pca_result$x) %&gt;% rownames_to_column(var = &quot;Reference&quot;) %&gt;% mutate(Label = if_else(str_detect(Reference, &quot;DMSO&quot;), &quot;DMSO&quot;, &quot;Sulforaphane&quot;)) # Calculate convex hulls for each group (optional) # These are used to draw polygons around the groups in the PCA plot hulls &lt;- pca_df %&gt;% group_by(Label) %&gt;% slice(chull(PC1, PC2)) %&gt;% ungroup() # Plot PCA results pca_df %&gt;% # Format Reference names for better readability in the plots mutate(Reference = case_when( Reference == &quot;DMSO_rep1&quot; ~ &quot;DMSO 1&quot;, Reference == &quot;DMSO_rep2&quot; ~ &quot;DMSO 2&quot;, Reference == &quot;DMSO_rep3&quot; ~ &quot;DMSO 3&quot;, Reference == &quot;DMSO_rep4&quot; ~ &quot;DMSO 4&quot;, Reference == &quot;Suf_rep1&quot; ~ &quot;Sulforaphane 1&quot;, Reference == &quot;Suf_rep2&quot; ~ &quot;Sulforaphane 2&quot;, Reference == &quot;Suf_rep3&quot; ~ &quot;Sulforaphane 3&quot;, Reference == &quot;Suf_rep4&quot; ~ &quot;Sulforaphane 4&quot;, TRUE ~ Reference )) %&gt;% # Start ggplot, map global aesthetics (x and y axes, color, and point labels) ggplot(aes(x = PC1, y = PC2, color = Label, label = Reference)) + geom_point(size = 6) + # Draw convex hulls around the groups geom_polygon( data = hulls, aes(x = PC1, y = PC2, fill = Label, color = Label), alpha = 0.15, color = NA, show.legend = FALSE ) + # Add text labels to the points geom_text(vjust = -1.3, hjust = 0.5, size = 3.5, show.legend = FALSE) + # Add labels and titles labs( title = &quot;Principal component analysis (PCA) of Log2-transformed protein intensities&quot;, x = paste0(&quot;PC1 (&quot;, round(pca_variance[1], 1), &quot;% variance)&quot;), y = paste0(&quot;PC2 (&quot;, round(pca_variance[2], 1), &quot;% variance)&quot;), color = &quot;Group&quot; ) + # Use the above defined colors for the color and fill aesthetics scale_color_manual(values = label_colors) + scale_fill_manual(values = label_colors) + # Use a minimal plot theme to start the customization theme_minimal() + # Further customize the theme theme( axis.text = element_text(size = 12, color = &quot;#666666&quot;), axis.title = element_text(size = 12.5), plot.title = element_text(size = 14, face = &quot;bold&quot;), legend.title = element_text(size = 12), legend.text = element_text(size = 12), legend.position = &quot;right&quot;, panel.grid.minor = element_blank(), panel.border = element_rect(color = &quot;#666666&quot;, fill = NA), axis.ticks = element_line(color = &quot;#666666&quot;) ) 4.5.2 Identify and plot proteins with highest fold-change between conditions # Compute fold-change per gene between Sulforaphane and DMSO fold_changes &lt;- protein_data_parsed %&gt;% group_by(Gene, Label) %&gt;% filter(n() &gt;= 2) %&gt;% # keep only labels with &gt;=2 replicates ungroup() %&gt;% group_by(Gene) %&gt;% filter(n_distinct(Label) == 2) %&gt;% # keep only proteins present in both groups summarize( DMSO = mean(Intensity[Label == &quot;DMSO&quot;], na.rm = TRUE), Sulforaphane = mean(Intensity[Label == &quot;Sulforaphane&quot;], na.rm = TRUE), .groups = &quot;drop&quot; ) %&gt;% mutate( Log2FC = Sulforaphane - DMSO, # already log2-transformed ) %&gt;% # Prepare a column indicating in which condition intensity is higher # This column will be used for faceting the plot later mutate(higher_in = case_when( Log2FC &gt; 0 ~ &quot;Higher in Sulforaphane&quot;, Log2FC &lt; 0 ~ &quot;Higher in DMSO&quot;, TRUE ~ &quot;No change&quot; )) %&gt;% arrange(desc(Log2FC)) # Extract top 20 proteins with highest absolute Log2FC in each condition top_proteins_DMSO &lt;- fold_changes %&gt;% filter(higher_in == &quot;Higher in DMSO&quot;) %&gt;% slice_max(order_by = abs(Log2FC), n = 20) top_proteins_sulforaphane &lt;- fold_changes %&gt;% filter(higher_in == &quot;Higher in Sulforaphane&quot;) %&gt;% slice_max(order_by = abs(Log2FC), n = 20) # Combine the top proteins from both conditions top_proteins_both &lt;- bind_rows(top_proteins_DMSO, top_proteins_sulforaphane) # Prepare data for plotting plot_data &lt;- protein_data_parsed %&gt;% group_by(Gene, Label) %&gt;% summarize( Mean = mean(Intensity, na.rm = TRUE), SD = sd(Intensity, na.rm = TRUE), .groups = &quot;drop&quot; ) %&gt;% # Inner join the current data frame with the top proteins to keep only those inner_join(top_proteins_both[, c(&quot;Gene&quot;, &quot;higher_in&quot;)], by = &quot;Gene&quot;) plot_data %&gt;% # Start ggplot, map global aesthetics (x and y axes, color, and group) # Also, reorder genes based on their mean intensity for better visualization ggplot(aes(x = reorder(Gene, Mean), y = Mean, color = Label, group = Gene)) + # Add lines connecting the points of the same gene # (needs &#39;group&#39; aesthetic for the correct behavior) geom_line(color = &quot;#999999&quot;, linewidth = 1, show.legend = FALSE) + # Add &quot;shadow&quot; points representing the standard deviation. # They should be behind the main points, so add them first. geom_point(aes(size = SD), position = position_dodge(width = 0.5), alpha = 0.35, show.legend = TRUE ) + # Add points for each condition. geom_point(position = position_dodge(width = 0.5), size = 4, show.legend = FALSE) + # Refine size scale for the SD points for better visibility scale_size_continuous(range = c(6, 13), breaks = c(1, 2, 3)) + # Flip coordinates. What is mapped to x axis goes to y axis and vice versa. coord_flip() + # Add labels and titles labs( title = &quot;Top 20 proteins with highest Log2FC between Sulforaphane and DMSO&quot;, x = &quot;Gene symbol&quot;, y = &quot;Mean Log2 [Intensity]&quot;, size = &quot;Standard deviation&quot;, color = &quot;Group&quot; ) + # Use the above defined colors for the color aesthetic scale_color_manual(values = label_colors) + # Use a minimal plot theme to start the customization theme_minimal() + # Create a separate facet (subplot) for each condition where intensity is higher facet_wrap(~higher_in, scales = &quot;free_y&quot;, nrow = 1) + # Further customize the theme theme( axis.text = element_text(size = 13, color = &quot;#666666&quot;), axis.title = element_text(size = 14), plot.title = element_text(size = 17, face = &quot;bold&quot;), legend.title = element_text(size = 13), legend.text = element_text(size = 13), legend.position = &quot;right&quot;, legend.key.size = unit(1.2, &quot;lines&quot;), strip.text = element_text(size = 14), panel.grid.minor = element_blank(), panel.border = element_rect(color = &quot;#666666&quot;, fill = NA), axis.ticks = element_line(color = &quot;#666666&quot;) ) + guides(color = guide_legend( override.aes = list(size = 5, alpha = 1) )) "],["visualization-practice.html", "5 Visualization Practice", " 5 Visualization Practice "],["printing-all-package-versions-good-practice-to-ensure-reproducibility.html", "6 Printing all package versions (good practice to ensure reproducibility)", " 6 Printing all package versions (good practice to ensure reproducibility) ## R version 4.4.1 (2024-06-14) ## Platform: aarch64-apple-darwin20 ## Running under: macOS Sonoma 14.3 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib; LAPACK version 3.12.0 ## ## locale: ## [1] C/UTF-8/C/C/C/C ## ## time zone: Europe/Copenhagen ## tzcode source: internal ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] lubridate_1.9.4 forcats_1.0.0 stringr_1.5.1 dplyr_1.1.4 ## [5] purrr_1.0.4 readr_2.1.5 tidyr_1.3.1 tibble_3.2.1 ## [9] ggplot2_3.5.2 tidyverse_2.0.0 webshot2_0.1.2 ## ## loaded via a namespace (and not attached): ## [1] utf8_1.2.5 sass_0.4.10 generics_0.1.4 stringi_1.8.7 ## [5] hms_1.1.3 digest_0.6.37 magrittr_2.0.3 timechange_0.3.0 ## [9] evaluate_1.0.3 grid_4.4.1 RColorBrewer_1.1-3 bookdown_0.43 ## [13] fastmap_1.2.0 jsonlite_2.0.0 processx_3.8.6 chromote_0.5.1 ## [17] ps_1.9.1 promises_1.3.2 scales_1.4.0 jquerylib_0.1.4 ## [21] cli_3.6.5 crayon_1.5.3 rlang_1.1.6 bit64_4.6.0-1 ## [25] withr_3.0.2 cachem_1.1.0 yaml_2.3.10 parallel_4.4.1 ## [29] tools_4.4.1 tzdb_0.5.0 vctrs_0.6.5 R6_2.6.1 ## [33] lifecycle_1.0.4 bit_4.6.0 vroom_1.6.5 fontawesome_0.5.3 ## [37] pkgconfig_2.0.3 pillar_1.10.2 bslib_0.9.0 later_1.4.2 ## [41] gtable_0.3.6 glue_1.8.0 Rcpp_1.0.14 xfun_0.52 ## [45] tidyselect_1.2.1 rstudioapi_0.17.1 knitr_1.50 farver_2.1.2 ## [49] htmltools_0.5.8.1 websocket_1.4.4 labeling_0.4.3 rmarkdown_2.29 ## [53] compiler_4.4.1 "],["wrap-up-structure.html", "7 Wrap-up structure", " 7 Wrap-up structure "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
